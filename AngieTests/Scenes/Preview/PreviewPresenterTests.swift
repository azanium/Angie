//
//  PreviewPresenterTests.swift
//  Angie
//
//  Created by Suhendra Ahmad on 7/5/17.
//  Copyright (c) 2017 Suhendra Ahmad. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Angie
import XCTest

class PreviewPresenterTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: PreviewPresenter!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        setupPreviewPresenter()
    }
    
    override func tearDown()
    {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupPreviewPresenter()
    {
        sut = PreviewPresenter()
    }
    
    // MARK: Test doubles
    
    class PreviewDisplayLogicSpy: PreviewDisplayLogic
    {
        var displayPhotoCalled = false
        
        var viewModel: Preview.Photo.ViewModel!
        
        func displayPhoto(viewModel: Preview.Photo.ViewModel)
        {
            displayPhotoCalled = true
            self.viewModel = viewModel
        }
    }
    
    // MARK: Tests
    
    func testDisplayFetchPhotosShouldFormatFetchedPhotosForPresentation()
    {
        // Given
        let previewDisplayLogicSpy = PreviewDisplayLogicSpy()
        sut.viewController = previewDisplayLogicSpy
        
        var dateComponents = DateComponents()
        dateComponents.year = 2017
        dateComponents.month = 7
        dateComponents.day = 5
        let date = Calendar.current.date(from: dateComponents)!
        
        let media = FlickrMedia(m: "m", h: "h", l: "l")
        let photo = FlickrPhoto(title: "title", link: "link", media: media, dateTaken: date, description: "desc", published: date, author: "author", authorId: "authorId", tags: "tags")
        let response = Preview.Photo.Response(photo: photo)
        
        // When
        sut.presentPhoto(response: response)
        
        // Then
        let displayedPhoto = previewDisplayLogicSpy.viewModel.photo
        
        XCTAssertEqual(displayedPhoto.author, "author", "Displaying loaded photo should have correct author")
        XCTAssertEqual(displayedPhoto.authorId, "authorId", "Displaying loaded photo should have correct author Id")
        XCTAssertEqual(displayedPhoto.dateTaken, date, "Displaying loaded photo should have correct date")
        XCTAssertEqual(displayedPhoto.description, "desc", "Displaying loaded photo should have correct description")
        XCTAssertEqual(displayedPhoto.link, "link", "Displaying loaded photo should have correct link")
        XCTAssertEqual(displayedPhoto.media.m, media.m, "Displaying loaded photo should have correct media")
        XCTAssertEqual(displayedPhoto.published, date, "Displaying loaded photo should have correct published date")
        XCTAssertEqual(displayedPhoto.tags, "tags", "Displaying loaded photo should have correct tags")
        XCTAssertEqual(displayedPhoto.title, "title", "Displaying loaded photo should have correct title")
        
    }
}
