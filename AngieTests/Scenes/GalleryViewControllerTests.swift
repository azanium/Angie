//
//  GalleryViewControllerTests.swift
//  Angie
//
//  Created by Suhendra Ahmad on 7/5/17.
//  Copyright (c) 2017 Suhendra Ahmad. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import Angie
import XCTest

class GalleryViewControllerTests: XCTestCase
{
    // MARK: Subject under test
    
    var sut: GalleryViewController!
    var window: UIWindow!
    
    // MARK: Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupGalleryViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupGalleryViewController()
    {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier: "GalleryViewController") as! GalleryViewController
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Test doubles
    
    class GalleryBusinessLogicSpy: GalleryBusinessLogic {
        
        var fetchPhotosCalled = false
        
        func fetchPhotos(request: Gallery.Photo.Request) {
            fetchPhotosCalled = true
        }
    }
    
    class CollectionViewSpy: UICollectionView {
        var reloadDataCalled = false
        
        override func reloadData() {
            reloadDataCalled = true
        }
    }
    
    // MARK: Tests
    
    func testShouldFetchPhotosWhenViewIsLoaded()
    {
        // Given
        let galleryBusinessLogicSpy = GalleryBusinessLogicSpy()
        sut.interactor = galleryBusinessLogicSpy
        
        // When
        loadView()
        
        // Then
        XCTAssert(galleryBusinessLogicSpy.fetchPhotosCalled, "Should fetch photos when the view is loaded")
    }
    
    func testShouldDisplayFetchedPhotos()
    {
        // Given
        let collectionViewSpy = CollectionViewSpy(frame: CGRect.zero, collectionViewLayout: UICollectionViewFlowLayout())
        sut.collectionView = collectionViewSpy
        
        let photos = [FlickrPhoto()]
        let viewModel = Gallery.Photo.ViewModel(success: true, photos: photos)
        
        // When
        sut.presentPhotos(viewModel: viewModel)
        
        // Then
        XCTAssert(collectionViewSpy.reloadDataCalled, "Presenting fetched photos should reload the collection view")
    }
    
    func testNumberOfSectionsInCollectionViewShouldAlwaysBeOne()
    {
        // Given
        let collectionView = sut.collectionView
        
        // When
        let numberOfSections = sut.numberOfSections(in: collectionView!)
        
        // Then
        XCTAssertEqual(numberOfSections, 1, "The number of collection view sections should always be 1")
    }
    
    func testNumberOfItemInAnySectionShouldEqualNumberOfPhotosToPresent()
    {
        // Given
        let collectionView = sut.collectionView
        let testPresentedPhotos = [
            FlickrPhoto()
        ]
        sut.presentedPhotos = testPresentedPhotos
        
        // When
        let numberOfRows = sut.collectionView(collectionView!, numberOfItemsInSection: 0)
        
        // Then
        XCTAssertEqual(numberOfRows, testPresentedPhotos.count, "The number of items should equal to the number of presented photos")
    }
}
